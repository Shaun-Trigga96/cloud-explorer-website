/* src/components/Hero/Hero.module.css */

.hero {
  background: var(--hero-background-gradient); /* Use CSS variable */
  color: var(--hero-text-color); /* Use CSS variable */
  padding: 100px 0 150px;
  position: relative;
  overflow: hidden;
  text-align: center;
  transition: background var(--transition-normal); /* Smooth background transition */
}

.container {
  max-width: var(--container-max-width); /* Use variable */
  margin: 0 auto;
  padding: 0 var(--container-padding); /* Use variable */
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  z-index: 2;
}

@media (min-width: 768px) {
  .container {
    flex-direction: row;
    text-align: left;
    justify-content: space-between;
  }
}

.heroContent {
  max-width: 600px;
  margin-bottom: var(--space-xl); /* Use variable */
}

@media (min-width: 768px) {
  .heroContent {
    margin-bottom: 0;
    margin-right: var(--space-xl); /* Use variable */
  }
}

.heroContent h1 {
  font-size: var(--font-size-3xl); /* Use variable, adjust as needed */
  margin-bottom: var(--space-md); /* Use variable */
  color: var(--hero-text-color); /* Ensure h1 color is also themable */
}

.heroContent p {
  font-size: var(--font-size-lg); /* Use variable, adjust as needed */
  margin-bottom: var(--space-lg); /* Use variable */
  color: var(--hero-text-color); /* Ensure p color is also themable */
  opacity: 0.9; /* Slight opacity for better readability on gradient */
}

.heroButtons {
  display: flex;
  gap: var(--space-sm); /* Use variable */
  justify-content: center;
}

@media (min-width: 768px) {
  .heroButtons {
    justify-content: flex-start;
  }
}

.btn {
  padding: var(--space-sm) var(--space-md); /* Use variables */
  border-radius: var(--border-radius-md); /* Use variable */
  text-decoration: none;
  font-weight: bold;
  transition: transform 0.2s ease, background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
  display: inline-block;
  border: 2px solid transparent; /* Base border for consistent sizing */
}

.btn:hover {
  transform: translateY(-2px);
}

.primaryBtn {
  background-color: var(--hero-primary-btn-bg);
  color: var(--hero-primary-btn-text);
}

.primaryBtn:hover {
  background-color: var(--hero-primary-btn-hover-bg);
}

.secondaryBtn {
  background-color: transparent;
  color: var(--hero-secondary-btn-text);
  border-color: var(--hero-secondary-btn-border);
}

.secondaryBtn:hover {
  background-color: var(--hero-secondary-btn-hover-bg);
}

.heroImage {
  max-width: 500px;
  width: 80%;
}

@media (min-width: 768px) {
  .heroImage {
    width: auto;
  }
}

.heroImage img {
  max-width: 50%;
  height: auto;
  border-radius: var(--border-radius-lg); /* Use variable */
  box-shadow: var(--shadow-lg); /* Use variable */
}

.waveDivider {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  overflow: hidden;
  line-height: 0;
  transform: rotate(180deg);
  z-index: 1;
}

.waveDivider svg {
  position: relative;
  display: block;
  width: calc(100% + 1.3px);
  height: 100px; /* Can be made a variable if needed */
}

.waveDivider path {
  fill: var(--wave-divider-fill); /* Use CSS variable for fill */
  transition: fill var(--transition-normal); /* Smooth fill transition */
}

/* Dark Mode Specific Styles for Hero */
.hero.darkMode .heroContent h1,
.hero.darkMode .heroContent p {
  color: var(--hero-text-color); /* This is already set, but confirms it uses the dark mode var */
}

/* Button adjustments in dark mode are handled by the CSS variables
   --hero-primary-btn-bg, --hero-primary-btn-text etc.
   So, specific .darkMode rules for buttons might not be needed here if variables are set up correctly.
   However, you can add them if more specific overrides are required.
*/

/* Example: If you need to ensure image shadow is adjusted for dark mode more specifically */
.hero.darkMode .heroImage img {
   box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); /* Slightly different shadow for dark mode if needed */
}